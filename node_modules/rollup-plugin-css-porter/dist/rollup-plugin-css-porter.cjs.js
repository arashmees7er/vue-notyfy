'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var rollupPluginutils = require('rollup-pluginutils');
var os = require('os');
var path = _interopDefault(require('path'));
var fsp = _interopDefault(require('fs-promise'));
var CleanCss = _interopDefault(require('clean-css'));

var ext = /\.css$/;

var index = function(options) {
  if ( options === void 0 ) options = {};

  if (!options.include) { options.include = '**/*.css'; }
  var filter = rollupPluginutils.createFilter(options.include, options.exclude);
  var styles = {};
  return {
    name: 'rollup-plugin-css-porter',
    transform: function transform(code, id) {
      if (!ext.test(id)) { return }
      if (!filter(id)) { return }

      // cache all css code
      if (!styles.hasOwnProperty(id) || styles[id] != code) { styles[id] = code; }
      return ''
    },
    onwrite: function onwrite(opts) {
      if (!Object.keys(styles).length) { return } // nothing to output

      // the file of output: use this plugin options.dest or `bundle.write()` options.dest
      var dest = options.dest || opts.dest;
      if (!dest) { return } // output nothing if no dest config

      // remove js module extname
      dest = dest.slice(0, -1 * path.extname(dest).length);

      // combine all css code
      var cssCode = [];
      Object.keys(styles).forEach(function (key) { return cssCode.push(styles[key]); });
      cssCode = cssCode.join(os.EOL); // join with platform line break

      // output origin css
      return fsp.writeFile(dest + '.css', cssCode).then(function () {
        // default behavior is to create a minified css file
        if (options.minified === false) { return }

        // minified css code: https://www.npmjs.com/package/clean-css#how-to-make-sure-remote-imports-are-processed-correctly
        return new Promise(function(resolve, reject) {
          new CleanCss(options.cleanCSSOptions).minify(cssCode, function(err, m) {
            if (err) { reject(err); }
            else { resolve(fsp.writeFile(dest + '.min.css', m.styles)); } // output minified css
          });
        })
      })
    }
  }
};

module.exports = index;
